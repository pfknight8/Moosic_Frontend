{"ast":null,"code":"var _jsxFileName = \"/Users/tommy/ga_seir/projects/Moosic_Frontend/src/Components/SearchBar.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = _ref => {\n  let {\n    songSearchFilters,\n    setSongSearchFilters\n  } = _ref;\n\n  //State -- There is no state here! State is changed by these features, but by function brought down to this component!\n  //Functions -- Consider moving handleChange functions up; I liked having them here for organization, with the required state variables & functions passed into this component as props.\n  const handleFormChange = e => {\n    let formItem = e.target.value;\n\n    switch (e.target.id) {\n      case 'title':\n        setSongSearchFilters({ ...songSearchFilters,\n          title: formItem\n        });\n        break;\n\n      case 'minRunTime':\n        setSongSearchFilters({ ...songSearchFilters,\n          minRunTime: formItem\n        });\n        break;\n\n      case 'maxRunTime':\n        setSongSearchFilters({ ...songSearchFilters,\n          maxRunTime: formItem\n        });\n        break;\n\n      case 'artist':\n        setSongSearchFilters({ ...songSearchFilters,\n          artist: formItem\n        });\n        break;\n\n      case 'genre':\n        setSongSearchFilters({ ...songSearchFilters,\n          genre: formItem\n        });\n        break;\n\n      default:\n        alert(\"Something went egregiously wrong!\");\n    }\n  };\n\n  const handleFormReset = () => {\n    setSongSearchFilters({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onReset: handleFormReset,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchfield\",\n        id: \"title\",\n        onChange: handleFormChange,\n        placeholder: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"minRunTime\",\n        children: \"Min Time (seconds): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchfield\",\n        id: \"minRunTime\",\n        onChange: handleFormChange,\n        placeholder: \"Greater Than, as Seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"maxRunTime\",\n        children: \"Max Time (seconds): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchfield\",\n        id: \"maxRunTime\",\n        onChange: handleFormChange,\n        placeholder: \"Less Than, as Seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"artist\",\n        children: \"Artist/Band: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchfield\",\n        id: \"artist\",\n        onChange: handleFormChange,\n        placeholder: \"Artist/Band\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"genre\",\n        children: \"Genre: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchfield\",\n        id: \"genre\",\n        onChange: handleFormChange,\n        placeholder: \"Genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"reset\",\n      value: \"Reset\",\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SearchBar;\nexport default SearchBar; // Will need to parse run times as integers (as seconds) before searching the databse. {Will be done elsewhere, but making this note while thinking of it.}\n// How do we make genres be \"less specific?\" The are many, depending on who you ask, so are Indie Rock, Classic Rock, or W/E Rock all going to come up if a user types in 'rock' or '___rock'? It would be hard to make a selector box with 42 genres in it, so will need a flexible user-typed-in search.\n// What?\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["SearchBar","songSearchFilters","setSongSearchFilters","handleFormChange","e","formItem","target","value","id","title","minRunTime","maxRunTime","artist","genre","alert","handleFormReset"],"sources":["/Users/tommy/ga_seir/projects/Moosic_Frontend/src/Components/SearchBar.jsx"],"sourcesContent":["const SearchBar = ({ songSearchFilters, setSongSearchFilters }) => {\n  //State -- There is no state here! State is changed by these features, but by function brought down to this component!\n  //Functions -- Consider moving handleChange functions up; I liked having them here for organization, with the required state variables & functions passed into this component as props.\n  const handleFormChange = (e) => {\n    let formItem = e.target.value\n    switch(e.target.id) {\n      case 'title':\n        setSongSearchFilters({...songSearchFilters, title: formItem})\n        break\n      case 'minRunTime':\n        setSongSearchFilters({...songSearchFilters, minRunTime: formItem})\n        break\n      case 'maxRunTime':\n        setSongSearchFilters({...songSearchFilters, maxRunTime: formItem})\n        break\n      case 'artist':\n        setSongSearchFilters({...songSearchFilters, artist: formItem})\n        break\n      case 'genre':\n        setSongSearchFilters({...songSearchFilters, genre: formItem})\n        break\n      default:\n        alert(\"Something went egregiously wrong!\")\n    }\n  }\n\n  const handleFormReset = () => {\n    setSongSearchFilters({})\n  }\n\n  return (\n    <form onReset={handleFormReset}>\n      <div>\n        <label htmlFor=\"title\">Title: </label>\n        <input className=\"searchfield\" id=\"title\" onChange={handleFormChange} placeholder=\"Title\"></input>\n      </div>\n      <div>\n        <label htmlFor=\"minRunTime\">Min Time (seconds): </label>\n        <input className=\"searchfield\" id=\"minRunTime\" onChange={handleFormChange} placeholder=\"Greater Than, as Seconds\"></input>\n      </div>\n      <div>\n        <label htmlFor=\"maxRunTime\">Max Time (seconds): </label>\n        <input className=\"searchfield\" id=\"maxRunTime\" onChange={handleFormChange} placeholder=\"Less Than, as Seconds\"></input>\n      </div>\n      <div>\n        <label htmlFor=\"artist\">Artist/Band: </label>\n        <input className=\"searchfield\" id=\"artist\" onChange={handleFormChange} placeholder=\"Artist/Band\"></input>\n      </div>\n      <div>\n        <label htmlFor=\"genre\">Genre: </label>\n        <input className=\"searchfield\" id=\"genre\" onChange={handleFormChange} placeholder=\"Genre\"></input>\n      </div>\n      <button type=\"reset\" value=\"Reset\">Reset</button>\n    </form>\n  )\n}\n\nexport default SearchBar\n\n// Will need to parse run times as integers (as seconds) before searching the databse. {Will be done elsewhere, but making this note while thinking of it.}\n\n// How do we make genres be \"less specific?\" The are many, depending on who you ask, so are Indie Rock, Classic Rock, or W/E Rock all going to come up if a user types in 'rock' or '___rock'? It would be hard to make a selector box with 42 genres in it, so will need a flexible user-typed-in search.\n\n// What?"],"mappings":";;;AAAA,MAAMA,SAAS,GAAG,QAAiD;EAAA,IAAhD;IAAEC,iBAAF;IAAqBC;EAArB,CAAgD;;EACjE;EACA;EACA,MAAMC,gBAAgB,GAAIC,CAAD,IAAO;IAC9B,IAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAxB;;IACA,QAAOH,CAAC,CAACE,MAAF,CAASE,EAAhB;MACE,KAAK,OAAL;QACEN,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;UAAuBQ,KAAK,EAAEJ;QAA9B,CAAD,CAApB;QACA;;MACF,KAAK,YAAL;QACEH,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;UAAuBS,UAAU,EAAEL;QAAnC,CAAD,CAApB;QACA;;MACF,KAAK,YAAL;QACEH,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;UAAuBU,UAAU,EAAEN;QAAnC,CAAD,CAApB;QACA;;MACF,KAAK,QAAL;QACEH,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;UAAuBW,MAAM,EAAEP;QAA/B,CAAD,CAApB;QACA;;MACF,KAAK,OAAL;QACEH,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;UAAuBY,KAAK,EAAER;QAA9B,CAAD,CAApB;QACA;;MACF;QACES,KAAK,CAAC,mCAAD,CAAL;IAjBJ;EAmBD,CArBD;;EAuBA,MAAMC,eAAe,GAAG,MAAM;IAC5Bb,oBAAoB,CAAC,EAAD,CAApB;EACD,CAFD;;EAIA,oBACE;IAAM,OAAO,EAAEa,eAAf;IAAA,wBACE;MAAA,wBACE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,SAAS,EAAC,aAAjB;QAA+B,EAAE,EAAC,OAAlC;QAA0C,QAAQ,EAAEZ,gBAApD;QAAsE,WAAW,EAAC;MAAlF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAKE;MAAA,wBACE;QAAO,OAAO,EAAC,YAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,SAAS,EAAC,aAAjB;QAA+B,EAAE,EAAC,YAAlC;QAA+C,QAAQ,EAAEA,gBAAzD;QAA2E,WAAW,EAAC;MAAvF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eASE;MAAA,wBACE;QAAO,OAAO,EAAC,YAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,SAAS,EAAC,aAAjB;QAA+B,EAAE,EAAC,YAAlC;QAA+C,QAAQ,EAAEA,gBAAzD;QAA2E,WAAW,EAAC;MAAvF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QATF,eAaE;MAAA,wBACE;QAAO,OAAO,EAAC,QAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,SAAS,EAAC,aAAjB;QAA+B,EAAE,EAAC,QAAlC;QAA2C,QAAQ,EAAEA,gBAArD;QAAuE,WAAW,EAAC;MAAnF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF,eAiBE;MAAA,wBACE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,SAAS,EAAC,aAAjB;QAA+B,EAAE,EAAC,OAAlC;QAA0C,QAAQ,EAAEA,gBAApD;QAAsE,WAAW,EAAC;MAAlF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAjBF,eAqBE;MAAQ,IAAI,EAAC,OAAb;MAAqB,KAAK,EAAC,OAA3B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QArBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CAvDD;;KAAMH,S;AAyDN,eAAeA,SAAf,C,CAEA;AAEA;AAEA"},"metadata":{},"sourceType":"module"}