{"ast":null,"code":"var _jsxFileName = \"/Users/emilybyrne/ga_seir/unit3/projects/Moosic_Frontend/client/src/Components/SongCard.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SongCard = _ref => {\n  let {\n    song,\n    handleSongSelect\n  } = _ref;\n  //\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `songCard ${song.genre}Card`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"img-content\",\n      children: song.image ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"songCardImg\",\n        src: song.image,\n        alt: song.title,\n        width: \"300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 23\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-box\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Title: \", song.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSongSelect,\n      children: \"Click for Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SongCard;\nexport default SongCard; //The multiple classNames will be useful for formatting. The 'song.genre' template literal will allow us to conditionally format the card, if desired.\n\nvar _c;\n\n$RefreshReg$(_c, \"SongCard\");","map":{"version":3,"names":["SongCard","song","handleSongSelect","genre","image","title"],"sources":["/Users/emilybyrne/ga_seir/unit3/projects/Moosic_Frontend/client/src/Components/SongCard.jsx"],"sourcesContent":["const SongCard = ({song, handleSongSelect}) => {\n  //\n  return (\n    <div className={`songCard ${song.genre}Card`}>\n      <div className=\"img-content\">\n        {song.image ? <img className=\"songCardImg\" src={song.image} alt={song.title} width=\"300\"/> : null}\n      </div>\n      <div className=\"info-box\">\n        <h2>Title: {song.title}</h2>\n      </div>\n      <button onClick={handleSongSelect}>Click for Details</button>\n    </div>\n  )\n}\n\nexport default SongCard\n\n//The multiple classNames will be useful for formatting. The 'song.genre' template literal will allow us to conditionally format the card, if desired."],"mappings":";;;AAAA,MAAMA,QAAQ,GAAG,QAA8B;EAAA,IAA7B;IAACC,IAAD;IAAOC;EAAP,CAA6B;EAC7C;EACA,oBACE;IAAK,SAAS,EAAG,YAAWD,IAAI,CAACE,KAAM,MAAvC;IAAA,wBACE;MAAK,SAAS,EAAC,aAAf;MAAA,UACGF,IAAI,CAACG,KAAL,gBAAa;QAAK,SAAS,EAAC,aAAf;QAA6B,GAAG,EAAEH,IAAI,CAACG,KAAvC;QAA8C,GAAG,EAAEH,IAAI,CAACI,KAAxD;QAA+D,KAAK,EAAC;MAArE;QAAA;QAAA;QAAA;MAAA,QAAb,GAA4F;IAD/F;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAK,SAAS,EAAC,UAAf;MAAA,uBACE;QAAA,sBAAYJ,IAAI,CAACI,KAAjB;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAJF,eAOE;MAAQ,OAAO,EAAEH,gBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAbD;;KAAMF,Q;AAeN,eAAeA,QAAf,C,CAEA"},"metadata":{},"sourceType":"module"}